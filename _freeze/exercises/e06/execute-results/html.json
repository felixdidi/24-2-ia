{
  "hash": "a9edacd643840126b3f9ce88295d041a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Aufgabe 06\"\nmessage: false\nwarning: false\n---\n\n\n\nBitte nutzen Sie f√ºr alle √úbungen dass Wissen, dass Sie sich aus dem Vorbereitungsskript f√ºr die heutige Sitzung angeeignet haben. Es ist nicht verboten, dieses zur Orientierung zu verwenden, Sie m√ºssen nicht alle Funktionen auswendig kennen ;-)\n\n## Laden und Inspizieren des YouTube-Kommentare Datensatzes\n\nSie k√∂nnen den Datensatz ganz einfach einladen √ºber den folgenden Befehl:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncomments <- read_parquet(\"http://data.felix-dietrich.de/comments.parquet.gzip\")\n```\n:::\n\n\n\nSchauen Sie sich die Daten an und √ºberlegen Sie sich 2-3 interessante deskriptive Werte, die wir uns zu diesen Daten anschauen k√∂nnten. Setzen Sie dies nach M√∂glichkeit in R um. Bauen Sie au√üerdem mindestens eine Grafik.\n\n## Laden der zugeh√∂rigen Videos und Transkription\n\n√úberlegen Sie sich, wie sie eine kleine Test-Stichprobe (bspw. *n* = 5) aus allen Videos ziehen k√∂nnen. Laden Sie diese Videos herunter und transkribieren sie nach M√∂glichkeit. √úberlegen Sie sich, wie Sie ggf. auch zu den Inhalten des Videos eine erste grobe Analyse durchf√ºhren k√∂nnten.\n\n\n## Muster-Code\n\nIm folgenden die in der Sitzung besprochenen Code-Beispiele.\n\nZun√§chst ist es f√ºr diverse Schritte in diesem Workflow wichtig, dass Ihr Arbeitsverzeichnis richtig gesetzt ist. Daher empfehle ich, dass Sie ein R-Projekt anlegen und dieses in RStudio √∂ffnen. Alle weiteren Schritte k√∂nnen Sie dann innerhalb dieses Projekts ausf√ºhren.\n\nZum Einlesen der Kommentare ist zun√§chst das `arrow`-Paket notwendig.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(arrow)\ntheme_set(theme_minimal())\n\ncomments <- read_parquet(\"http://data.felix-dietrich.de/comments.parquet.gzip\")\n```\n:::\n\n\n\nWir k√∂nnen uns dann z.B. erstmal den Datensatz an sich ansehen...\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncomments\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 280,427 √ó 14\n    index comment_id  published_at comment author_channel_id video_id channel_id\n    <int> <chr>       <chr>        <chr>   <chr>             <chr>    <chr>     \n 1 145155 UgyJP-6d-f‚Ä¶ 2019-03-11T‚Ä¶ \"I lov‚Ä¶ UCjDkmRxO5uROl0f‚Ä¶ LfGOtE2‚Ä¶ UCOIGee5h‚Ä¶\n 2 145143 UgzhMxly_w‚Ä¶ 2019-03-11T‚Ä¶ \"Happy‚Ä¶ UCHoSMv9ifkTtZz1‚Ä¶ LfGOtE2‚Ä¶ UCOIGee5h‚Ä¶\n 3 144845 UgwK80w_07‚Ä¶ 2019-03-11T‚Ä¶ \"I lov‚Ä¶ UCmhVWRUcmpsk4qZ‚Ä¶ LfGOtE2‚Ä¶ UCOIGee5h‚Ä¶\n 4 144734 UgwTrNQ-8C‚Ä¶ 2019-03-11T‚Ä¶ \"Love ‚Ä¶ UCAJOUj7M9PSPB0l‚Ä¶ LfGOtE2‚Ä¶ UCOIGee5h‚Ä¶\n 5 144456 Ugwi7wGKDL‚Ä¶ 2019-03-11T‚Ä¶ \"LITER‚Ä¶ UCggmCt5WdqV3ZRa‚Ä¶ LfGOtE2‚Ä¶ UCOIGee5h‚Ä¶\n 6 144416 UgzqjG7MYk‚Ä¶ 2019-03-11T‚Ä¶ \"Awwwe‚Ä¶ UC1ckC8itaxzwVkh‚Ä¶ LfGOtE2‚Ä¶ UCOIGee5h‚Ä¶\n 7 144076 Ugy17coYF2‚Ä¶ 2019-03-11T‚Ä¶ \"Happy‚Ä¶ UCTVpywQBD9HXXZM‚Ä¶ LfGOtE2‚Ä¶ UCOIGee5h‚Ä¶\n 8 144024 Ugz5EHA4LL‚Ä¶ 2019-03-11T‚Ä¶ \"I can‚Ä¶ UCdUT9NO7KvR3X4J‚Ä¶ LfGOtE2‚Ä¶ UCOIGee5h‚Ä¶\n 9 143986 UgyLGznLHC‚Ä¶ 2019-03-11T‚Ä¶ \"Happy‚Ä¶ UCGEQx1oICXRd28u‚Ä¶ LfGOtE2‚Ä¶ UCOIGee5h‚Ä¶\n10 143779 UgxKv4x2gT‚Ä¶ 2019-03-11T‚Ä¶ \"I mis‚Ä¶ UCQJRL3fSEpsIs9A‚Ä¶ LfGOtE2‚Ä¶ UCOIGee5h‚Ä¶\n# ‚Ñπ 280,417 more rows\n# ‚Ñπ 7 more variables: view_count <chr>, like_count <chr>,\n#   dislike_count <arrw_bnr>, favorite_count <chr>, video_published_at <dttm>,\n#   video_date <date>, video_comment_count <chr>\n```\n\n\n:::\n:::\n\n\n\n...oder uns ausgeben lassen, welche Variablen (d.h. Spalten) im Datensatz enthalten sind.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(comments)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"index\"               \"comment_id\"          \"published_at\"       \n [4] \"comment\"             \"author_channel_id\"   \"video_id\"           \n [7] \"channel_id\"          \"view_count\"          \"like_count\"         \n[10] \"dislike_count\"       \"favorite_count\"      \"video_published_at\" \n[13] \"video_date\"          \"video_comment_count\"\n```\n\n\n:::\n:::\n\n\n\nWir k√∂nnen uns auch eine kleine Zufallsstichprobe an Kommentaren ausgeben lassen.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(42)\ncomments |> \n  slice_sample(n = 10) |> \n  pull(comment)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Just had an argument with my dude about cleaning our room a little. Housekeepers get rooms ready for the next not clean up behind filthy ninjas. That‚Äôs for a MAID üòÖ\"          \n [2] \"Ugh he's always flexing Dilo said how u gone hold the door open and CJ says I'm trying to make sure nobody following US. They following ME NOT YALL LOL ü§£ü§£ü§£ BOY WHO ARE YOU?\"\n [3] \"Txunamy I hope you have fun at prom your dad is so overworked active next time tell him not to go with you next time you should tell your mom to go with you\"                   \n [4] \"The hospital needs to be giving you iv antibiotics!\\nI was admitted to the hospital and got iv antibiotics when I got stabbed.\"                                                 \n [5] \"How it feel getting played? Be more humble my guy\"                                                                                                                              \n [6] \"I love seeing you traveling and enjoying family and friends many blessings üôèüèΩüôåüèΩüíï\\n\\nSincerely,\\n\\nMisty.Oüíï\"                                                               \n [7] \"Wow!! I'm honestly so shocked they did all of this work in like 1 hour!\"                                                                                                        \n [8] \"All you can do is do what you can. When those kids grow up, they will know the truth. But no parent should you their child as a pawn.\"                                          \n [9] \"Oh I laughed and had so much fun with you all tonight! Thank you and I enjoyed another fun time with the Crosby‚Äôs! Have great weekend\"                                          \n[10] \"Her room is beautiful , she's adorable god bless her ‚ù§‚ù§\"                                                                                                                        \n```\n\n\n:::\n:::\n\n\n\nNun z√§hlen wir aus, wie viele Kommentare pro Kanal vorhanden sind...\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncomments |>\n  group_by(channel_id) |> \n  count() |> \n  arrange(desc(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14 √ó 2\n# Groups:   channel_id [14]\n   channel_id                   n\n   <chr>                    <int>\n 1 UCfrREf-q6PbTxNgsB5XAp6A 67266\n 2 UCVyM1Zknz3u2hGLAN2NVtZg 66980\n 3 UCSmUMOEPlAfAzbXIVuXso2w 54226\n 4 UCVNYw6ZGvK1_OhF8OG1OrKA 22385\n 5 UCOIGee5h5-_8cfY4wFwPX_w 19927\n 6 UC5ZOSZ-Bpass2ZkJY9q9ISg 17359\n 7 UCfAEEhKikW1676DCa_0OWLA 17249\n 8 UCfFsZu7Ed20xKDOmzdpF3EQ  7686\n 9 UCHOMvu3axPhTG5zLqrHynig  4399\n10 UCyPz82J9A8xU5L6lHyLVHpw  1878\n11 <NA>                       547\n12 UChbKYCOnUtou3RPtFXeT73w   340\n13 UC2VERcmMqi3vdtoQQ0ZP2sA   152\n14 UC4-CH0epzZpD_ARhxCx6LaQ    33\n```\n\n\n:::\n:::\n\n\n\n...und entfernen Kan√§le mit sehr wenigen Kommentaren.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncomments_cleaned <- \n  comments |>\n  group_by(channel_id) |> \n  filter(n() > 1000) |> \n  ungroup()\n```\n:::\n\n\n\nWir k√∂nnen au√üerdem den Code aus dem Vorbereitungsskript anpassen und uns bspw. ansehen, in wie viel Prozent der Kommentare je Kanal Herzchen-Emojis verwendet wurden und dies √ºber den Zeitverlauf abbilden.\n\n\n\n::: {.cell .column-page}\n\n```{.r .cell-code}\ncomments_cleaned |>\n  mutate(\n    hearts = str_detect(comment, \"‚ù§Ô∏è\"),\n    week = floor_date(as.Date(published_at), \"month\")\n  ) |>\n  group_by(week, channel_id) |>\n  summarise(share_of_hearts = sum(hearts) / n(), n = n()) |>\n  ggplot(aes(x = week, y = share_of_hearts)) +\n  geom_line() +\n  scale_x_date(\n    date_breaks = \"1 year\",\n    date_labels = \"%Y\"\n  ) +\n  facet_wrap(~ channel_id) +\n  labs(\n    x = \"\", y = \"Prozentualer Anteil der Kommentare mit Herzchen pro Monat\",\n    title = \"Zuneigung zu Family-Voggern\"\n  )\n```\n\n::: {.cell-output-display}\n![](e06_files/figure-html/unnamed-chunk-8-1.png){width=1440}\n:::\n:::\n\n\n\nWenn wir nicht nur die Inhalte der Kommentare, sondern auch die Inhalte der zugeh√∂rigen Videos analysieren wollen, k√∂nnen wir diese bspw. herunterladen und transkribieren. Zun√§chst ben√∂tigen wir eine `.txt` Datei mit den URLs aller Videos, die wir herunterladen wollen. Diese k√∂nnen wir aus dem Kommentardatensatz auf Basis der Spalte `video_id` erstellen. Beispielhaft erstellen wir hier ein zuf√§lliges Sample von 5 Videos, die wir herunterladen wollen. In einem Forschungsprojekt w√ºrden wir an dieser Stelle anstelle einer Zufallsauswahl vermutlich eher diejenigen `video_id`s extrahieren, die f√ºr uns inhaltlich relevant sind.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncomments |> \n  select(channel_id, video_id) |> \n  distinct() |> # hiermit entfernen wir Duplikate, da video_id und channel_id im Datensatz mehrfach vorkommen (pro Kommentar)\n  slice_sample(n = 5) |> \n  mutate(url = str_c(\"https://www.youtube.com/watch?v=\", video_id)) |> # hier erstellen wir die URL aus der video_id\n  pull(url) |> # in den letzten drei Schritten ziehen wir die URLs heraus...\n  str_flatten(collapse = \"\\n\") |> #...f√ºgen sie zusammen\n  write_file(\"test_urls.txt\") # und speichern sie in der Datei test_urls.txt\n```\n:::\n\n\n\nAuf Basis der erstellten Datei `test_urls.txt` k√∂nnen wir im n√§chsten Schritt die Videos mit dem Programm `yt-dlp` herunterladen und in einem neuen Unterordner namens `videos` abspeichern. Dazu m√ºssen Sie zun√§chst sicherstellen, dass Python korrekt auf ihrem Computer installiert ist. √ñffnen Sie hierzu in RStudio den Tab \"Terminal\" (zu finden direkt neben der \"Console\", in der Sie normalerweise R-Code ausf√ºhren). Diese \"Kommandozeile\" Ihres Computers funktioniert im Grunde sehr √§hnlich wie auch die R-Kommandozeile, die Sie bereits kennen. Um zu testen, ob Python funktioniert, geben Sie `python3` ein und best√§tigen Sie mit Enter. Es sollte sich nun eine Python-Umgebung mit einigen Informationen √ºber die installierte Version √∂ffnen. In dieser wollen wir nun jedoch gar nicht arbeiten, und schlie√üen sie daher √ºber den Befehl `quit()` direkt wieder. Stattdessen richten wir in der Kommandozeile des Computers in ihrem Projektordner eine neues Python-Environment ein. Sofern Sie in RStudio wie oben empfohlen ein Projekt erstellt und ge√∂ffnet haben, sollte sich die Kommandozeile automatisch im richtigen Ordner befinden. Sie k√∂nnen dies √ºberpr√ºfen, indem Sie in die Kommandozeile den Befehl `ls` eingeben und mit Enter best√§tigen. Es sollten nun die Dateien und Ordner, die sich in Ihrem aktuellen Projektordner befinden, aufgelistet werden. Wenn dies der Fall ist, k√∂nnen wir im folgenden nun das Environment einrichten. Daf√ºr f√ºhren wir die folgenden beiden Befehle nacheinander in der Kommandozeile aus.\n\n```bash\npython3 -m venv env\n# und dann\nsource env/bin/activate\n# dieser zweite Befehl muss jedes Mal neu ausgef√ºhrt werden, wenn Sie\n# die Kommandozeile neu starten (so wie wir in R jedes Mal die Pakete neu laden m√ºssen)\n```\nSofern das geklappt hat, sollen Sie in Ihrem Projektordner nun einen Unterordner mit dem Namen `env` sehen, in den wir gleich die ben√∂tigten Pakete installieren werden. Dies tun wir mit dem Befehl `pip install`, welcher √§hnlich zu `install.packages()` in R ist. Wir installieren direkt die beiden Programme `yt-dlp` (f√ºr den Videodownload) und `whisper-ctranslate2` f√ºr die Transkription. Auch diese Befehle f√ºhren wir wieder in der Konsole des Computers (nicht in der R-Konsole) aus. \n\n```bash\npip install yt-dlp\n# und dann\npip install whisper-ctranslate2\n```\n\nWenn die Installation erfolgreich war, k√∂nnen wir nun mit dem Download der Videos beginnen. Dazu nutzen wir einfach den folgenden Befehl. Wenn alle Schritte oben korrekt befolgt wurden, sollte dieser Befehl alle Videos, die in der Datei `test_urls.txt` gespeichert sind, herunterladen. \n\n```bash\nyt-dlp -w --write-info-json --write-thumbnail --no-write-playlist-metafiles  -c -o \"%(id)s.%(ext)s\" -P videos -a test_urls.txt\n```\n\nWenn Sie den Befehl modifizieren m√∂chten, k√∂nnen Sie die Bedeutung der einzelnen Parameter in der [Dokumentation des Pakets nachlesen](https://github.com/yt-dlp/yt-dlp).\n\nNeben den Videos l√§dt das Programm auch einige Metadaten herunter, diese k√∂nnen wir anschlie√üend wieder in R einlesen. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyt_metadata <-\n  list.files(\"videos\", pattern = \"*.json\", full.names = TRUE) |>\n  map(jsonlite::fromJSON) |>\n  map_df(unlist) |>\n  select(-starts_with(c(\"formats\", \"http_headers\"))) |> \n  select(title, duration, ends_with(\"count\"))\n\nyt_metadata\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 √ó 6\n  title      duration view_count comment_count like_count channel_follower_count\n  <chr>         <dbl>      <dbl>         <dbl>      <dbl>                  <dbl>\n1 'Better T‚Ä¶     1092     114780          1000       6731                2180000\n2 YOU WON'T‚Ä¶      912    2477732          8000     122526                2250000\n3 BUYING Ev‚Ä¶     1276    7261283          3500     220656               10600000\n4 NEW YEAR'‚Ä¶      650    2107860          1500      17421                7900000\n5 Saying Go‚Ä¶      894     142649           234       3723                2180000\n```\n\n\n:::\n:::\n\n\n\nAbschlie√üend wollen wir nun die Videos transkribieren, damit wir ihren Inhalt sp√§ter analysieren k√∂nnen. Dies funktioniert erneut √ºber einen Befehl in der Kommandozeile Ihres Computers (nachdem Sie oben schon `whisper-ctranslate2` installiert haben). Beispielhaft transkribieren wir hier nur eines der heruntergeladenen Videos, indem wir es im Befehl √ºber den entsprechenden Pfad (Unterordner `videos`) und Dateinamen ausw√§hlen. Alternativ k√∂nnen wir auch alle Videos auf einmal transkribieren, indem wir im Befehl einen Platzhalter (`videos/*.mp4`) verwenden.\n\n```bash\nwhisper-ctranslate2  --model medium --output_format tsv videos/MDMoo3wkMQs.mp4\n```\nAuch die erstellten Transkripe k√∂nnen wir (√§hnlich wie oben die Metadaten) alle auf einmal einlesen, indem Sie den entsprechenden Befehl von oben modifizieren. Da wir testweise nur ein Video transkribiert haben, laden wir dieses einfach ein mit\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntranscript <- read_tsv(\"MDMoo3wkMQs.tsv\")\ntranscript\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 161 √ó 3\n   start   end text                                   \n   <dbl> <dbl> <chr>                                  \n 1     0  2000 Today is New Year's gift opening day.  \n 2  2000  4160 This is mine, and this is Rachel's.    \n 3  4160  4660 Boo!                                   \n 4  8660 10060 Don't worry, these gifts were cool.    \n 5 10060 11680 Comment down below if you have an idea.\n 6 11680 12480 Who goes first?                        \n 7 12480 12980 Me!                                    \n 8 12980 13480 Me!                                    \n 9 13480 14480 Okay, rock, paper, scissors.           \n10 14480 15480 Rock, paper, scissors!                 \n# ‚Ñπ 151 more rows\n```\n\n\n:::\n:::\n",
    "supporting": [
      "e06_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}